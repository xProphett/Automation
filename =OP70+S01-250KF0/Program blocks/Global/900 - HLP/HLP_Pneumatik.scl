FUNCTION "HLP_Pneumatik" : Void
TITLE = Auxiliary module for pneumatics
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : OlegFuehrus
FAMILY : HLP
NAME : HLP
VERSION : 1.0
   VAR_INPUT 
      FNCT : Int;   // 0 = disable, 1 = both in the same time, 2 = first on the opposite side
      SWITCH_ON_IMP : Bool;   // Enable pulse: Restore self-retaining (deactivated with 0)
      POS_WORK_POS : Bool;   // End position Working position
      CTRL_WORK_POS : Bool;   // Control of working position
      TIME_WORK_POS : Time;   // Switching time (in ms)
      POS_HOME_POS : Bool;   // End position Normal position
      CTRL_HOME_POS : Bool;   // Control Basic position
      TIME_HOME_POS : Time;   // Switching time (in ms)
   END_VAR

   VAR_OUTPUT 
      FILLING : Bool;   // Valves are ventilated
   END_VAR

   VAR_IN_OUT 
      OUT_WORK_POS : Bool;   // Output working position
      OUT_HOME_POS : Bool;   // Output basic position
      TIMES : Struct
         START : Time;
         AKTUEL : Time;
      END_STRUCT;
   END_VAR

   VAR_TEMP 
      _LTIME : LTime;   // Last cycle time
      _TIME_CYC : Time;   // Duration of the last cycle
      _TIME_CT : Time;   // Current Time
      _TIME_START : Time;   // Start Time
      _RET_VAL : Int;   // Error output
      _FKT1 : Bool;   // Control both
      _FKT2 : Bool;   // Opposite side only
      _RES : Bool;   // Time factor reset
      _OUT_FKT1 : Bool;   // Output for function 1
      _OUT_FKT2 : Bool;   // Output for function 1
   END_VAR

   VAR CONSTANT 
      c0ms : Time;   // constant 0 ms
   END_VAR


BEGIN
	REGION INIT
	    #FILLING := FALSE;
	    #_TIME_CT := #TIMES.AKTUEL;
	    #_TIME_START := #TIMES.START;
	    #_RET_VAL := RT_INFO(MODE := 25, OB := 0, INFO := #_LTIME);
	    #_TIME_CYC := LTIME_TO_TIME(#_LTIME);
	END_REGION
	
	REGION Funktion
	IF #FNCT = 1 THEN
	    #_FKT1 := true;
	    #_FKT2 := false;
	ELSIF #FNCT = 2 THEN
	    #_FKT2 := true;
	    #_FKT1 := false;
	ELSE
	    #_FKT2 := false;
	    #_FKT1 := false;
	END_IF;
	END_REGION
	
	REGION Reset Zeit
	    #_RES := (NOT #_FKT1 AND NOT #_FKT2) OR ((NOT #CTRL_WORK_POS AND NOT #CTRL_HOME_POS) OR (#_TIME_CT > #_TIME_START));
	IF #_RES THEN
	    #_TIME_CT := #c0ms;
	END_IF;
	END_REGION
	
	REGION Ansteuerung VOR
	    #FILLING := (#CTRL_WORK_POS AND NOT #OUT_WORK_POS AND NOT #OUT_HOME_POS) OR (#_TIME_CT > #c0ms);
	IF #FILLING THEN
	    #_TIME_CT := T_ADD(IN1 := #_TIME_CT, IN2 := #_TIME_CYC);
	END_IF;
	END_REGION
	
	REGION Ansteuerung ZUR
	    #FILLING := (#CTRL_HOME_POS AND NOT #OUT_WORK_POS AND NOT #OUT_HOME_POS) OR (#_TIME_CT > #c0ms);
	IF #FILLING THEN
	    #_TIME_CT := T_ADD(IN1 := #_TIME_CT, IN2 := #_TIME_CYC);
	END_IF;
	END_REGION
	
	REGION Start Ansteuerung VOR
	IF #CTRL_WORK_POS AND NOT #OUT_WORK_POS AND NOT #OUT_HOME_POS THEN
	    #_TIME_CT := t#1ms;
	    #_TIME_START := #TIME_WORK_POS;
	END_IF;
	END_REGION
	
	REGION Start Ansteuerung ZUR
	IF #CTRL_HOME_POS AND NOT #OUT_WORK_POS AND NOT #OUT_HOME_POS THEN
	    #_TIME_CT := t#1ms;
	    #_TIME_START := #TIME_HOME_POS;
	END_IF;
	END_REGION
	
	REGION Ausgang VOR
	    #_OUT_FKT1 := ((#_TIME_CT > #c0ms) OR #CTRL_WORK_POS) AND #_FKT1;
	    #_OUT_FKT2 := ((#CTRL_HOME_POS AND NOT #CTRL_WORK_POS AND (#_TIME_CT > #c0ms)) OR (#CTRL_WORK_POS AND (#_TIME_CT > #c0ms))) AND #_FKT2;
	    #OUT_WORK_POS := #_OUT_FKT1 OR #_OUT_FKT2 OR ((#OUT_WORK_POS OR #SWITCH_ON_IMP) AND #POS_WORK_POS AND NOT #CTRL_HOME_POS);
	END_REGION
	
	REGION Ausgang ZUR
	    #_OUT_FKT1 := ((#_TIME_CT > #c0ms) OR #CTRL_HOME_POS) AND #_FKT1;
	    #_OUT_FKT2 := ((#CTRL_WORK_POS AND NOT #CTRL_HOME_POS AND (#_TIME_CT > #c0ms)) OR (#CTRL_HOME_POS AND (#_TIME_CT > #c0ms))) AND #_FKT2;
	    #OUT_HOME_POS := #_OUT_FKT1 OR #_OUT_FKT2 OR ((#OUT_HOME_POS OR #SWITCH_ON_IMP) AND #POS_HOME_POS AND NOT #CTRL_WORK_POS);
	END_REGION
	
	REGION Fertig
	    #TIMES.AKTUEL:=#_TIME_CT;
	    #TIMES.START:=#_TIME_START;
	END_REGION
	
END_FUNCTION

