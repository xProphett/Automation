FUNCTION "HLP_HexIntBool_Converter" : Void
TITLE = Converter
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : VAF
FAMILY : HLP
NAME : HLP
VERSION : 1.0
   VAR_INPUT 
      inputValue : Variant;
   END_VAR

   VAR_OUTPUT 
      valid : Bool;
   END_VAR

   VAR_IN_OUT 
      convertMode : UInt;
      outputValue : Variant;
   END_VAR

   VAR_TEMP 
      count : UDInt;
      statWord : Word;
      statByte : Byte;
      statInt : Int;
      statSInt : SInt;
      statBoolW : Array[0..15] of Bool;
      statBoolB : Array[0..7] of Bool;
      inputWord : Word;
      inputByte : Byte;
      input_ArrayOBool_0to15 : Array[0..15] of Bool;
      input_ArrayOBool_0to7 : Array[0..7] of Bool;
      inputInt : Int;
      outWord_in_Bool : Array[0..15] of Bool;
      outWord_in_Int : Int;
      outByte_in_Bool : Array[0..7] of Bool;
      outByte_in_Int : Int;
      out16Bool_in_Word : Word;
      out8Bool_in_Byte : Byte;
      outInt_in_Word : Word;
      outInt_in_16Bool : Array[0..15] of Bool;
      out16Bool_in_Int : Int;
   END_VAR


BEGIN
	(*
	NOTE! Before using the program / FC: 
	The appropriate* mode for the conversion process (output as "convertMode") will be automatically chosen according to the data type on input and output parameter.
	
	*The following conversions are possible:
	Mode 0 = WORD to Array [0..15] of BOOL
	Mode 1 = WORD to INT
	Mode 2 = BYTE to Array [0..7] of BOOL
	Mode 3 = BYTE to INT
	Mode 4 = Array [0..15] of BOOL to WORD
	Mode 5 = Array [0..7] of BOOL to BYTE
	Mode 6 = INT to WORD
	Mode 7 = INT to Array [0..15] of BOOL
	Mode 8 = Array [0..15] of BOOL to INT 
	
	Info regarding WORD (or INT) and Array of BOOL (16 bit):
	You can recognize and use Array 0..15 of BOOL as bit 0..15.
	
	Info: The minimum value of an array of BOOL estimated via the instruction "CountOfElements" is 8 bit (CountOfElements outputs "8"). 
	"CountOfElements" counts the elements of an array of BOOL per used BYTE. 
	-->An array [0...1] of BOOL and also an array [0...7] of BOOL are estimated as 8 elements big.
	-->An array [0...8] of BOOL and also an array [0...15] of BOOL are estimated as 16 elements big.
	-->An array [0...16] of BOOL and also an array [0...23] of BOOL are estimated as 24 elements big. 
	*)
	
	//.................................Chooses convert mode based on the used data types.
	//Sets "convertMode" and jumps to the corresponding LABEL.
	IF TypeOf(#inputValue) = TypeOf(#inputWord) AND
	    TypeOf(#outputValue) = TypeOf(#outWord_in_Bool) THEN
	    #count := CountOfElements(#outputValue);
	    IF #count >= 16 THEN
	        #convertMode := 0;
	        GOTO Mode0;
	    ELSIF #count < 16 THEN
	        #convertMode := 8080;
	        GOTO End;
	    END_IF;
	ELSIF TypeOf(#inputValue) = TypeOf(#inputWord) AND
	    TypeOf(#outputValue) = TypeOf(#outWord_in_Int) THEN
	    #convertMode := 1;
	    GOTO Mode1;
	ELSIF TypeOf(#inputValue) = TypeOf(#inputByte) AND
	    TypeOf(#outputValue) = TypeOf(#outByte_in_Bool) THEN
	    #count := CountOfElements(#outputValue);
	    IF #count >= 8 THEN
	        #convertMode := 2;
	        GOTO Mode2;
	    ELSIF #count < 8 THEN
	        #convertMode := 8080;
	        GOTO End;
	    END_IF;
	ELSIF TypeOf(#inputValue) = TypeOf(#inputByte) AND
	    TypeOf(#outputValue) = TypeOf(#outByte_in_Int) THEN
	    #convertMode := 3;
	    GOTO Mode3;
	ELSIF TypeOf(#inputValue) = TypeOf(#input_ArrayOBool_0to15) AND
	    TypeOf(#outputValue) = TypeOf(#out16Bool_in_Word) THEN
	    #count := CountOfElements(#inputValue);
	    IF #count <= 16 THEN
	        #convertMode := 4;
	        GOTO Mode4;
	    ELSIF #count > 16 THEN
	        #convertMode := 8080;
	        GOTO End;
	    END_IF;
	ELSIF TypeOf(#inputValue) = TypeOf(#input_ArrayOBool_0to7) AND
	    TypeOf(#outputValue) = TypeOf(#out8Bool_in_Byte) THEN
	    #count := CountOfElements(#inputValue);
	    IF #count <= 8 THEN
	        #convertMode := 5;
	        GOTO Mode5;
	    ELSIF #count > 8 THEN
	        #convertMode := 8080;
	        GOTO End;
	    END_IF;
	ELSIF TypeOf(#inputValue) = TypeOf(#inputInt) AND
	    TypeOf(#outputValue) = TypeOf(#outInt_in_Word) THEN
	    #convertMode := 6;
	    GOTO Mode6;
	ELSIF TypeOf(#inputValue) = TypeOf(#inputInt) AND
	    TypeOf(#outputValue) = TypeOf(#outInt_in_16Bool) THEN
	    #count := CountOfElements(#outputValue);
	    IF #count >= 16 THEN
	        #convertMode := 7;
	        GOTO Mode7;
	    ELSIF #count < 16 THEN
	        #convertMode := 8080;
	        GOTO End;
	    END_IF;
	ELSIF TypeOf(#inputValue) = TypeOf(#input_ArrayOBool_0to15) AND
	    TypeOf(#outputValue) = TypeOf(#out16Bool_in_Int) THEN
	    #count := CountOfElements(#inputValue);
	    IF #count <= 16 THEN
	        #convertMode := 8;
	        GOTO Mode8;
	    ELSIF #count > 16 THEN
	        #convertMode := 8080;
	        GOTO End;
	    END_IF;
	ELSE
	    #convertMode := 9999;
	    GOTO End;
	END_IF;
	
	//.................................Converts WORD to Array [0-15] of BOOL
	Mode0:
	VariantGet(SRC := #inputValue,
	           DST => #inputWord);
	#statWord := #inputWord;
	#outWord_in_Bool[0] := #statWord.%X0;
	#outWord_in_Bool[1] := #statWord.%X1;
	#outWord_in_Bool[2] := #statWord.%X2;
	#outWord_in_Bool[3] := #statWord.%X3;
	#outWord_in_Bool[4] := #statWord.%X4;
	#outWord_in_Bool[5] := #statWord.%X5;
	#outWord_in_Bool[6] := #statWord.%X6;
	#outWord_in_Bool[7] := #statWord.%X7;
	#outWord_in_Bool[8] := #statWord.%X8;
	#outWord_in_Bool[9] := #statWord.%X9;
	#outWord_in_Bool[10] := #statWord.%X10;
	#outWord_in_Bool[11] := #statWord.%X11;
	#outWord_in_Bool[12] := #statWord.%X12;
	#outWord_in_Bool[13] := #statWord.%X13;
	#outWord_in_Bool[14] := #statWord.%X14;
	#outWord_in_Bool[15] := #statWord.%X15;
	VariantPut(SRC := #outWord_in_Bool,
	           DST := #outputValue);
	GOTO End;
	
	//.................................Converts WORD to INT
	Mode1:
	VariantGet(SRC := #inputValue,
	           DST => #inputWord);
	#statInt := WORD_TO_INT(#inputWord);
	#outWord_in_Int := #statInt;
	VariantPut(SRC := #outWord_in_Int,
	           DST := #outputValue);
	GOTO End;
	
	//.................................Converts BYTE to Array [0-7] of BOOL
	Mode2:
	VariantGet(SRC := #inputValue,
	           DST => #inputByte);
	#statByte := #inputByte;
	#outByte_in_Bool[0] := #statByte.%X0;
	#outByte_in_Bool[1] := #statByte.%X1;
	#outByte_in_Bool[2] := #statByte.%X2;
	#outByte_in_Bool[3] := #statByte.%X3;
	#outByte_in_Bool[4] := #statByte.%X4;
	#outByte_in_Bool[5] := #statByte.%X5;
	#outByte_in_Bool[6] := #statByte.%X6;
	#outByte_in_Bool[7] := #statByte.%X7;
	VariantPut(SRC := #outByte_in_Bool,
	           DST := #outputValue);
	GOTO End;
	
	//.................................Converts BYTE to INT
	Mode3:
	VariantGet(SRC := #inputValue,
	           DST => #inputByte);
	#statSInt := BYTE_TO_SINT(#inputByte);
	#outByte_in_Int := #statSInt;
	VariantPut(SRC := #outByte_in_Int,
	           DST := #outputValue);
	GOTO End;
	
	//.................................Converts an Array [0-15] of BOOL to WORD
	Mode4:
	VariantGet(SRC := #inputValue,
	           DST => #input_ArrayOBool_0to15);
	#statBoolW := #input_ArrayOBool_0to15;
	#out16Bool_in_Word.%X0 := #statBoolW[0];
	#out16Bool_in_Word.%X1 := #statBoolW[1];
	#out16Bool_in_Word.%X2 := #statBoolW[2];
	#out16Bool_in_Word.%X3 := #statBoolW[3];
	#out16Bool_in_Word.%X4 := #statBoolW[4];
	#out16Bool_in_Word.%X5 := #statBoolW[5];
	#out16Bool_in_Word.%X6 := #statBoolW[6];
	#out16Bool_in_Word.%X7 := #statBoolW[7];
	#out16Bool_in_Word.%X8 := #statBoolW[8];
	#out16Bool_in_Word.%X9 := #statBoolW[9];
	#out16Bool_in_Word.%X10 := #statBoolW[10];
	#out16Bool_in_Word.%X11 := #statBoolW[11];
	#out16Bool_in_Word.%X12 := #statBoolW[12];
	#out16Bool_in_Word.%X13 := #statBoolW[13];
	#out16Bool_in_Word.%X14 := #statBoolW[14];
	#out16Bool_in_Word.%X15 := #statBoolW[15];
	VariantPut(SRC := #out16Bool_in_Word,
	           DST := #outputValue);
	GOTO End;
	
	//.................................Converts an Array [0-7] of BOOL to BYTE
	Mode5:
	VariantGet(SRC := #inputValue,
	           DST => #input_ArrayOBool_0to7);
	#statBoolB := #input_ArrayOBool_0to7;
	#out8Bool_in_Byte.%X0 := #statBoolB[0];
	#out8Bool_in_Byte.%X1 := #statBoolB[1];
	#out8Bool_in_Byte.%X2 := #statBoolB[2];
	#out8Bool_in_Byte.%X3 := #statBoolB[3];
	#out8Bool_in_Byte.%X4 := #statBoolB[4];
	#out8Bool_in_Byte.%X5 := #statBoolB[5];
	#out8Bool_in_Byte.%X6 := #statBoolB[6];
	#out8Bool_in_Byte.%X7 := #statBoolB[7];
	VariantPut(SRC := #out8Bool_in_Byte,
	           DST := #outputValue);
	GOTO End;
	
	//.................................Converts INT to WORD
	Mode6:
	VariantGet(SRC := #inputValue,
	           DST => #inputInt);
	#statWord := INT_TO_WORD(#inputInt);
	#outInt_in_Word := #statWord;
	VariantPut(SRC := #outInt_in_Word,
	           DST := #outputValue);
	GOTO End;
	
	//.................................Converts INT to Array [0-15] of BOOL
	Mode7:
	VariantGet(SRC := #inputValue,
	           DST => #inputInt);
	#statInt := #inputInt;
	#outInt_in_16Bool[0] := #statInt.%X0;
	#outInt_in_16Bool[1] := #statInt.%X1;
	#outInt_in_16Bool[2] := #statInt.%X2;
	#outInt_in_16Bool[3] := #statInt.%X3;
	#outInt_in_16Bool[4] := #statInt.%X4;
	#outInt_in_16Bool[5] := #statInt.%X5;
	#outInt_in_16Bool[6] := #statInt.%X6;
	#outInt_in_16Bool[7] := #statInt.%X7;
	#outInt_in_16Bool[8] := #statInt.%X8;
	#outInt_in_16Bool[9] := #statInt.%X9;
	#outInt_in_16Bool[10] := #statInt.%X10;
	#outInt_in_16Bool[11] := #statInt.%X11;
	#outInt_in_16Bool[12] := #statInt.%X12;
	#outInt_in_16Bool[13] := #statInt.%X13;
	#outInt_in_16Bool[14] := #statInt.%X14;
	#outInt_in_16Bool[15] := #statInt.%X15;
	VariantPut(SRC := #outInt_in_16Bool,
	           DST := #outputValue);
	GOTO End;
	
	//.................................Converts an Array [0-15] of BOOL to INT
	Mode8:
	VariantGet(SRC := #inputValue,
	           DST => #input_ArrayOBool_0to15);
	#statBoolW := #input_ArrayOBool_0to15;
	#out16Bool_in_Int.%X0 := #statBoolW[0];
	#out16Bool_in_Int.%X1 := #statBoolW[1];
	#out16Bool_in_Int.%X2 := #statBoolW[2];
	#out16Bool_in_Int.%X3 := #statBoolW[3];
	#out16Bool_in_Int.%X4 := #statBoolW[4];
	#out16Bool_in_Int.%X5 := #statBoolW[5];
	#out16Bool_in_Int.%X6 := #statBoolW[6];
	#out16Bool_in_Int.%X7 := #statBoolW[7];
	#out16Bool_in_Int.%X8 := #statBoolW[8];
	#out16Bool_in_Int.%X9 := #statBoolW[9];
	#out16Bool_in_Int.%X10 := #statBoolW[10];
	#out16Bool_in_Int.%X11 := #statBoolW[11];
	#out16Bool_in_Int.%X12 := #statBoolW[12];
	#out16Bool_in_Int.%X13 := #statBoolW[13];
	#out16Bool_in_Int.%X14 := #statBoolW[14];
	#out16Bool_in_Int.%X15 := #statBoolW[15];
	VariantPut(SRC := #out16Bool_in_Int,
	           DST := #outputValue);
	GOTO End;
	
	//.................................End of the conversion.
	//If "#convertMode" is not "9999" or "8080", "valid" will be set to "TRUE".
	//If "#convertMode" is "8080" = Cannot convert. Wrong array size for conversion chosen.
	//If "#convertMode" is "9999" = Cannot convert. Wrong data types for conversion chosen. 
	End:
	IF #convertMode = 9999 OR #convertMode = 8080 THEN
	    #valid := FALSE;
	ELSE
	    #valid := TRUE;
	END_IF;
	
END_FUNCTION

